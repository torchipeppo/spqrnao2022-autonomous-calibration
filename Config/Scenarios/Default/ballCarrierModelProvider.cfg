GRAPHICAL_DEBUG = true; //(BOOLEAN) shows a graphical debug render in SimRobot

OBSTACLE_AVOIDANCE_ARC_ANGLE_STEP_FACTOR = 16;  //Number of arcs in a curve of the ball path



ALWAYS_USE_GOAL_TARGET_HEURISTIC = true; //Always use the utility-based goal target as the ball path destinationy



MAXIMUM_APPROACH_DISTANCE = 550;
MINIMUM_APPROACH_DISTANCE = 100; //was 175 before

STATIC_APPROACH_RADIUS = 220;               /** If using potential fields, this should also be the radius of the repulsive field of the ball */




X_RANGE_DISTANCE_FROM_GOAL_TO_USE_KICKS = {
    min = 50;
    max = 950;
}; /* Range: MIN: Minimum distance from the opponent groundline above which kicks can be used (otherwise use InWalkKick to avoid losing time), MAX: (As per Challenge 1 rules) Distance from the opponent groundline below which kicks can be used */  

Y_RANGE_DISTANCE_FROM_GOAL_TO_USE_KICKS_INNER = { 
    min = -1000;
    max = 1000;
}; /*These ranges on the y coordinate contribute to creating a "kicking area" all around the goal, inside which kicking to goal is allowed*/

Y_RANGE_DISTANCE_FROM_GOAL_TO_USE_KICKS_OUTER = {
    min = -2000;
    max = 2000;
};




BASE_UPRIGHT_ROBOT_OBSTACLE_RADIUS = 800;                       /** Base radius used for upright robot as obstacles when the ball is outside their influence radius (other wise the distance between the ball and the obstacle is used)*/
MINIMUM_UPRIGHT_ROBOT_OBSTACLE_RADIUS = 500;                    /** Minimum radius used for upright robot as obstacles*/
MINIMUM_UPRIGHT_ROBOT_OBSTACLE_RADIUS_IN_KICKING_AREA = 500;    /** Minimum radius used for upright robot as obstacles when the ball is near the opponent goal*/
OBSTACLE_DANGER_ZONE_RADIUS = 500;                              /** If the ball is inside this radius from its nearest obstacle, an escape target, along the tangent to this obstacle, is preferred instead of the usual ball path */

OBSTACLE_RADIUS_MULTIPLIER_CHANGE_X_COORDINATE = 2000;          // After this X_coordinate, obstacle radia change by these multipliers (min -> before, max -> after)
OBSTACLE_RADIUS_MULTIPLIER = 
{
    min = 1.0;
    max = 1.0;
};




USE_LONG_KICKS_TO_CARRY = false;                                /** Use a long kick as the first kick - THE FOLLOWING THREE MATTER ONLY IF THIS BOOLEAN IS TRUE*/ 
FIRST_TARGET_POS_X = 1500;                                     /** X coordinate of the first target used in the first long kick for challenge1 */
FIRST_TARGET_WITH_ONE_OBSTACLE_POS_Y = 1600;                    /** Y coordinate of the first target used in the first long kick for challenge1, when only one obstacle is in front of the center circle */
FIRST_TARGET_WITH_TWO_OBSTACLES_POS_Y = 2100;                  /** Y coordinate of the first target used in the first long kick for challenge1, when two obstacle are in front of the center circle */




ESCAPE_OBSTACLES = false; //EXPERIMENTAL - NOT USED



USE_TRAJECTORY = false; // ALL THE FOLLOWING PARAMETERS MATTER ONLY IF THIS BOOLEAN IS TRUE
TRAJECTORY = [
    {
        destination = {
            x = 2000;
            y = 1800;
        };
        reachedAtXCoordinate = 1000;
    },
    {
        destination = {
            x = 4000;
            y = 1300;
        };
        reachedAtXCoordinate = 3400;
    }
];
ONLY_LEFT_PATH = true;
OFFSET_FROM_Y_CENTER_TO_CHANGE_TRAJECTORY = 300;
